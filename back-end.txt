using AutoMapper;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using tnmt_qn.Data;
using tnmt_qn.Dto;

namespace tnmt_qn.Service
{
    public interface ICT_ThongTinService
    {
        public Task<List<CT_ThongTinDto>> GetAllAsync(string? TenCT, int? IdLoaiCT, int? IdHuyen, int? IdXa, int? IdSong, int? IdLuuVuc, int? IdTieuLuuVuc, int? IdTangChuaNuoc, string? NguonNuocKT);
        public Task<CT_ThongTinDto?> GetByIdAsync(int Id);
        public Task<int> SaveAsync(CT_ThongTinDto dto, bool useTransaction = true);
        public Task<bool> DeleteAsync(int Id);

    }
    public class CT_ThongTinService : ICT_ThongTinService
    {
        private readonly DatabaseContext _context;
        private readonly IMapper _mapper;
        private readonly IHttpContextAccessor _httpContext;
        private readonly UserManager<AspNetUsers> _userManager;
        private readonly ILogChangeService _logChangeService;

        // Constructor to initialize the service with required dependencies
        public CT_ThongTinService(DatabaseContext context, IMapper mapper, IHttpContextAccessor httpContext, UserManager<AspNetUsers> userManager, ILogChangeService logChangeService)
        {
            _context = context;
            _mapper = mapper;
            _httpContext = httpContext;
            _userManager = userManager;
            _logChangeService = logChangeService;
        }

        // Method to retrieve a list of CT_ThongTin entities based on specified filters
        public async Task<List<CT_ThongTinDto>> GetAllAsync(string? TenCT, int? IdLoaiCT, int? IdHuyen, int? IdXa, int? IdSong, int? IdLuuVuc, int? IdTieuLuuVuc, int? IdTangChuaNuoc, string? NguonNuocKT)
        {
            _context.Database.SetCommandTimeout(120);

            var query = _context.CT_ThongTin!
                .Where(ct => ct.DaXoa == false)
                .Include(ct => ct.LoaiCT)
                .Include(ct => ct.TangChuaNuoc)
                .Include(ct => ct.HangMuc!).ThenInclude(hm => hm.ThongSo)
                .Include(ct => ct.ThongSo)
                .Include(ct => ct.LuuVuc)
                .Include(ct => ct.CT_ViTri!).ThenInclude(vt => vt.Xa)
                .Include(ct => ct.CT_ViTri!).ThenInclude(vt => vt.Huyen)
                .Include(ct => ct.GiayPhep!.OrderByDescending(gp => gp.NgayKy)).ThenInclude(gp => gp.ToChuc_CaNhan)
                 .Include(ct => ct.GiayPhep!).ThenInclude(gp => gp.GP_TCQ!).ThenInclude(tcq => tcq.TCQ_ThongTin)
                .Include(ct => ct.LuuLuongTheoMucDich!).ThenInclude(lld => lld.MucDichKT)
                .OrderBy(x => x.IdLoaiCT)
                .AsQueryable();

            // Apply filters based on input parameters
            if (!string.IsNullOrEmpty(TenCT))
            {
                query = query.Where(ct => ct.TenCT!.Contains(TenCT));
            }

            if (IdLoaiCT > 0)
            {
                query = query.Where(ct => IdLoaiCT == 1 || IdLoaiCT == 2 || IdLoaiCT == 3 || IdLoaiCT == 24 ? ct.LoaiCT!.IdCha == IdLoaiCT : ct.LoaiCT!.Id == IdLoaiCT);
            }

            if (IdXa > 0)
            {
                query = query.Where(ct => ct.CT_ViTri!.Any(x => x.IdXa!.Contains(IdXa.ToString()!)));
            }

            if (IdHuyen > 0)
            {
                query = query.Where(ct => ct.CT_ViTri!.Any(x => x.IdHuyen!.Contains(IdHuyen.ToString()!)));
            }

            if (IdSong > 0)
            {
                query = query.Where(ct => ct.IdSong == IdSong);
            }

            if (IdLuuVuc > 0)
            {
                query = query.Where(ct => ct.IdLuuVuc == IdLuuVuc);
            }

            if (IdTieuLuuVuc > 0)
            {
                query = query.Where(ct => ct.IdTieuLuuVuc == IdTieuLuuVuc);
            }

            if (IdTangChuaNuoc > 0)
            {
                query = query.Where(ct => ct.IdTangChuaNuoc == IdTangChuaNuoc);
            }

            if (!string.IsNullOrEmpty(NguonNuocKT))
            {
                query = query.Where(ct => ct.NguonNuocKT!.Contains(NguonNuocKT));
            }

            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);

            if (currentUser != null)
            {
                if (await _userManager.IsInRoleAsync(currentUser!, "Construction"))
                {
                    query = query.Where(ct => ct.TaiKhoan!.ToLower() == currentUser!.UserName!.ToLower());
                }

                if (await _userManager.IsInRoleAsync(currentUser!, "District"))
                {
                    query = query.Where(ct => ct.CT_ViTri!.Any(x => x.IdHuyen == currentUser!.IdHuyen));
                }
            }

            var congtrinh = await query.ToListAsync();

            // Map the result to DTOs
            var congTrinhDtos = _mapper.Map<List<CT_ThongTinDto>>(congtrinh);


            // Return the list of DTOs
            return congTrinhDtos;
        }

        // Method to retrieve a single CT_ThongTin entity by Id
        public async Task<CT_ThongTinDto?> GetByIdAsync(int Id)
        {
            var query = _context.CT_ThongTin!
                .Where(ct => ct.DaXoa == false)
                .Include(ct => ct.LoaiCT)
                .Include(ct => ct.TangChuaNuoc)
                .Include(ct => ct.HangMuc!).ThenInclude(hm => hm.ThongSo)
                .Include(ct => ct.ThongSo)
                .Include(ct => ct.LuuVuc)
                .Include(ct => ct.CT_ViTri)
                .Include(ct => ct.CT_ViTri!).ThenInclude(vt => vt.Xa)
                .Include(ct => ct.CT_ViTri!).ThenInclude(vt => vt.Huyen)
                .Include(ct => ct.GiayPhep)
                .Include(ct => ct.GiayPhep!).ThenInclude(gp => gp.ToChuc_CaNhan)
                .Include(ct => ct.GiayPhep!).ThenInclude(gp => gp.GP_TCQ)
                .Include(ct => ct.LuuLuongTheoMucDich!).ThenInclude(lld => lld.MucDichKT)
                .OrderBy(x => x.IdLoaiCT)
                .AsQueryable();

            var congTrinh = await query.SingleOrDefaultAsync(ct => ct.Id == Id);

            if (congTrinh == null)
            {
                // Handle the case where the record is not found
                return null;
            }

            var congTrinhDto = _mapper.Map<CT_ThongTinDto>(congTrinh);

            return congTrinhDto;
        }

        // ===============================
        // Method to save or update a CT_ThongTin entity
        // ===============================
        public async Task<int> SaveAsync(CT_ThongTinDto dto, bool useTransaction = true)
        {
            if (useTransaction)
            {
                // Create an execution strategy
                var strategy = _context.Database.CreateExecutionStrategy();

                // Execute the save operation with the strategy
                return await strategy.ExecuteAsync(async () =>
                {
                    using var transaction = await _context.Database.BeginTransactionAsync();
                    try
                    {
                        int id = await SaveWithoutTransaction(dto);
                        await transaction.CommitAsync();
                        return id;
                    }
                    catch
                    {
                        await transaction.RollbackAsync();
                        throw;
                    }
                });
            }
            else
            {
                return await SaveWithoutTransaction(dto);
            }
        }

        private async Task<int> SaveWithoutTransaction(CT_ThongTinDto dto)
        {
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);
            var userName = currentUser?.UserName;
            var now = DateTime.Now;

            var existingItem = await _context.CT_ThongTin!
                .Include(x => x.HangMuc)
                .Include(x => x.ThongSo)
                .Include(x => x.CT_ViTri)
                .Include(x => x.LuuLuongTheoMucDich)
                .FirstOrDefaultAsync(x => x.Id == dto.Id && x.DaXoa == false);

            CT_ThongTin item;

            if (existingItem != null)
            {
                // Xoá an toàn các bảng con nếu có
                if (existingItem.HangMuc != null)
                    _context.CT_HangMuc!.RemoveRange(existingItem.HangMuc.Where(x => x?.Id != 0));

                if (existingItem.ThongSo != null)
                    _context.CT_ThongSo!.Remove(existingItem.ThongSo);

                if (existingItem.CT_ViTri != null)
                    _context.CT_ViTri!.RemoveRange(existingItem.CT_ViTri.Where(x => x?.Id != 0));

                if (existingItem.LuuLuongTheoMucDich != null)
                    _context.LuuLuongTheoMucDich!.RemoveRange(existingItem.LuuLuongTheoMucDich.Where(x => x?.Id != 0));

                // Detach entity cũ để tránh lỗi EF tracking
                _context.Entry(existingItem).State = EntityState.Detached;

                item = _mapper.Map<CT_ThongTin>(dto);
                item.Id = (int)dto.Id!;
                item.ThoiGianSua = now;
                item.TaiKhoanSua = userName;

                _context.CT_ThongTin!.Update(item);
            }
            else
            {
                item = _mapper.Map<CT_ThongTin>(dto);
                item.ThoiGianTao = now;
                item.TaiKhoanTao = userName;
                item.DaXoa = false;

                _context.CT_ThongTin!.Add(item);
            }

            await _context.SaveChangesAsync();

            await _logChangeService.LogChangeAsync(
                "CT_ThongTin",
                existingItem == null ? "CREATE" : "UPDATE",
                existingItem != null ? _mapper.Map<CT_ThongTinDto>(existingItem) : null,
                item,
                item.Id,
                userName
            );

            return item.Id;
        }



        // Method to delete a CT_ThongTin entity
        public async Task<bool> DeleteAsync(int Id)
        {
            // Retrieve an existing item based on Id
            var existingItem = await _context.CT_ThongTin!.FirstOrDefaultAsync(d => d.Id == Id && d.DaXoa == false);
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);

            if (existingItem == null) { return false; } // If the item doesn't exist, return false

            var oldItem = _mapper.Map<CT_ThongTinDto>(existingItem);
            existingItem!.DaXoa = true; // Mark the item as deleted
            existingItem.ThoiGianSua = DateTime.Now;
            existingItem.TaiKhoanSua = currentUser != null ? currentUser.UserName : null;
            _context.CT_ThongTin!.Update(existingItem);

            // Log the creation (DELETE)
            await _logChangeService.LogChangeAsync(
                "CT_ThongTin",
                "DELETE",
                null,
                oldItem,
                existingItem.Id,
                currentUser != null ? currentUser.UserName : null
            );

            // Save changes to the database
            await _context.SaveChangesAsync();

            // Return true to indicate successful deletion
            return true;
        }
    }
}


using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using tnmt_qn.Data;
using tnmt_qn.Dto;
using tnmt_qn.Service;
using AutoMapper;
using Microsoft.EntityFrameworkCore;

namespace tnmt_qn.Controllers
{
    [Route("cong-trinh")]
    [ApiController]
    [Authorize]
    public class CongTrinhController : ControllerBase
    {
        private readonly ICT_ThongTinService _service;
        private readonly DatabaseContext _context;
        private readonly IMapper _mapper;

        public CongTrinhController(DatabaseContext context, IMapper mapper, ICT_ThongTinService service)
        {
            _context = context;
            _mapper = mapper;
            _service = service;
        }

        [HttpGet]
        [Route("danh-sach")]
        public async Task<List<CT_ThongTinDto>> GetAllData(string? tenct, int? loai_ct, int? huyen, int? xa, int? song, int? luuvuc, int? tieu_luuvuc, int? tang_chuanuoc, string? nguonnuoc_kt)
        {
            return await _service.GetAllAsync(tenct, loai_ct, huyen, xa, song, luuvuc, tieu_luuvuc, tang_chuanuoc, nguonnuoc_kt);
        }

        [HttpGet]
        [Route("{Id}")]
        public async Task<CT_ThongTinDto?> GetOneData(int Id)
        {
            return await _service.GetByIdAsync(Id);
        }

        [HttpPost]
        [Route("luu")]
        public async Task<ActionResult<CT_ThongTin>> Save(CT_ThongTinDto dto, [FromQuery] bool useTransaction = true)
        {
            var res = await _service.SaveAsync(dto, useTransaction);
            if (res > 0)
            {
                return Ok(new { message = "Công trình: Dữ liệu đã được lưu", id = res });
            }
            else
            {
                return BadRequest(new { message = "Công trình: Lỗi lưu dữ liệu", error = true });
            }
        }

        [HttpGet]
        [Route("xoa/{Id}")]
        public async Task<ActionResult<CT_ThongTin>> Delete(int Id)
        {
            var res = await _service.DeleteAsync(Id);
            if (res == true)
            {
                return Ok(new { message = "Công trình: Dữ liệu đã được xóa" });
            }
            else
            {
                return BadRequest(new { message = "Công trình: Lỗi xóa dữ liệu", error = true });
            }
        }

        [HttpGet]
        [Route("unlinked")]
        public async Task<ActionResult<List<CT_ThongTinDto>>> GetUnlinkedConstructions()
        {
            try
            {
                var constructions = await _context.CT_ThongTin!
                    .Include(c => c.LoaiCT)
                    .Where(c => c.DaXoa != true && string.IsNullOrEmpty(c.TaiKhoan))
                    .ToListAsync();

                return _mapper.Map<List<CT_ThongTinDto>>(constructions);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPost]
        [Route("set-account/{id}")]
        public async Task<ActionResult> SetAccount(int id, [FromBody] AccountNameDto model) // Changed parameter type
        {
            try
            {
                // Find the construction by ID
                var construction = await _context.CT_ThongTin!.FindAsync(id);

                if (construction == null || construction.DaXoa == true)
                {
                    return NotFound(new { message = "Công trình không tồn tại" });
                }

                // Update the account
                construction.TaiKhoan = model.AccountName;

                await _context.SaveChangesAsync();

                return Ok(new { message = "Đã liên kết tài khoản thành công", success = true });
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = $"Lỗi khi liên kết tài khoản: {ex.Message}", error = true });
            }
        }
    }
}


using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using tnmt_qn.Data;
using tnmt_qn.Dto;
using tnmt_qn.Helpers;
using tnmt_qn.Service;

namespace tnmt_qn.Controllers
{
    [Route("tai-khoan-ket-noi")]
    [ApiController]
    [Authorize]
    public class DataTransmissionAccountsController : ControllerBase
    {
        private readonly DataTransmissionAccountsService _service;

        public DataTransmissionAccountsController(DataTransmissionAccountsService service)
        {
            _service = service;
        }

        /// <summary>
        /// Get accounts based on user role:
        /// - Administrator: All accounts
        /// - Business: Accounts for constructions managed by the business
        /// - Construction: Account matching the username
        /// </summary>
        [HttpGet("theo-quyen")]
        public async Task<ActionResult<List<DataTransmissionAccountsDto>>> GetAccountsByRole()
        {
            try
            {
                var accounts = await _service.GetAccountsByRoleAsync();
                return Ok(accounts);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpGet("danh-sach")]
        [Authorize("Administrator")]
        public async Task<List<DataTransmissionAccountsDto>> GetAllData()
        {
            return await _service.GetAllAsync();
        }

        [HttpGet]
        [Route("tai-khoan")]
        public async Task<DataTransmissionAccountsDto> GetByConstruction()
        {
            return await _service.GetByUserAsync();
        }

        [HttpPost]
        [Route("luu")]
        public async Task<ActionResult<DataTransmissionAccounts>> Save(DataTransmissionAccountsDto dto)
        {
            var res = await _service.SaveAsync(dto);
            if (res > 0)
            {
                return Ok(new { message = "Saved  successfully" });
            }
            else
            {
                return BadRequest(new { message = "Saving  failed", error = true });
            }
        }

        /// <summary>
        /// Kích hoạt kết nối truyền dữ liệu và gửi mail thông báo.
        /// </summary>
        [HttpGet("duyet/{id}")]
        public async Task<IActionResult> Activate(int id)
        {
            // 1. Active trong DB
            var ok = await _service.ActiveAsync(id);
            if (!ok)
                return NotFound(new { success = false, message = "Không tìm thấy mục hoặc đã xóa." });

            return Ok(new { success = true });
        }

        /// <summary>
        /// Hủy kích hoạt kết nối truyền dữ liệu (chỉ đổi trạng thái, không gửi mail).
        /// </summary>
        [HttpGet("huy-duyet/{id}")]
        public async Task<IActionResult> Deactivate(int id)
        {
            var ok = await _service.DeActiveAsync(id);
            if (!ok)
                return NotFound(new { success = false, message = "Không tìm thấy mục hoặc đã xóa." });

            return Ok(new { success = true });
        }

        /// <summary>
        /// Get constructions managed by the business user with their connection accounts
        /// </summary>
        [HttpGet("business-constructions")]
        [Authorize("Business")]
        public async Task<ActionResult<List<BusinessConstructionDto>>> GetBusinessConstructions()
        {
            try
            {
                var constructions = await _service.GetBusinessConstructionsAsync();
                return Ok(constructions);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        /// <summary>
        /// Get constructions with connection accounts based on user role
        /// </summary>
        [HttpGet("client-constructions")]
        [Authorize(Roles = "Business,Construction")]
        public async Task<ActionResult<List<BusinessConstructionDto>>> GetClientConstructions()
        {
            try
            {
                var constructions = await _service.GetConstructionsForClientAsync();
                return Ok(constructions);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
    }
}

using System.Text;
using System.Security.Claims;
using AutoMapper;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using tnmt_qn.Data;
using tnmt_qn.Dto;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace tnmt_qn.Service
{
    public class DataTransmissionAccountsService
    {
        private readonly DatabaseContext _context;
        private readonly IMapper _mapper;
        private readonly IHttpContextAccessor _httpContext;
        private readonly UserManager<AspNetUsers> _userManager;
        private readonly ILogChangeService _logChangeService;
        private readonly IEmailService _mail;

        // Constructor to initialize the service with required dependencies
        public DataTransmissionAccountsService(
            DatabaseContext context,
            IMapper mapper,
            IHttpContextAccessor httpContext,
            ILogChangeService logChangeService,
            IEmailService mail,
            UserManager<AspNetUsers> userManager)
        {
            _context = context;
            _mapper = mapper;
            _httpContext = httpContext;
            _userManager = userManager;
            _mail = mail;
            _logChangeService = logChangeService;
        }

        // Method to retrieve a list of CT_ThongTin entities based on specified filters
        public async Task<List<DataTransmissionAccountsDto>> GetAllAsync()
        {
            // 1. Lấy user và kiểm tra role
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                              ?? throw new InvalidOperationException("User not found");
            var isAdmin = await _userManager.IsInRoleAsync(currentUser, "Administrator");

            // 2. Load toàn bộ account
            var stations = await _context.DataTransmissionAccounts!
                                         .AsNoTracking()
                                         .OrderBy(x => x.Id)
                                         .ToListAsync();

            // 3. Map về DTO
            var stationDtos = _mapper.Map<List<DataTransmissionAccountsDto>>(stations);

            // 4. Mask password nếu cần
            if (!isAdmin)
            {
                foreach (var dto in stationDtos)
                {
                    if (dto.Status == false)
                        dto.Password = "**************";
                }
            }

            return stationDtos;
        }


        public async Task<DataTransmissionAccountsDto> GetByUserAsync()
        {
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                                      ?? throw new InvalidOperationException("User not found");

            // normalize once in memory
            var normalizedUserName = currentUser.UserName!
                                           .Trim()
                                           .ToLowerInvariant();

            // 1) load the account
            var acc = await _context.DataTransmissionAccounts
                          .AsNoTracking()
                          .FirstOrDefaultAsync(a => a.Username!
                                                        .ToLower()
                                                    == normalizedUserName);
            if (acc == null)
                return new DataTransmissionAccountsDto();
            //throw new KeyNotFoundException($"No DataTransmissionAccount for '{currentUser.UserName}'");

            return await GetDtoByIdAsync(acc.Id!);
        }

        /// <summary>
        /// Lấy DTO (kèm phần cong_trinh) theo Id của DataTransmissionAccounts
        /// </summary>
        public async Task<DataTransmissionAccountsDto> GetDtoByIdAsync(int id)
        {
            // 1. Load account
            var acc = await _context.DataTransmissionAccounts
                                     .AsNoTracking()
                                     .FirstOrDefaultAsync(a => a.Id == id);
            if (acc == null) return new DataTransmissionAccountsDto();

            // 2. Map phần cơ bản
            var dto = _mapper.Map<DataTransmissionAccountsDto>(acc);

            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                                     ?? throw new InvalidOperationException("User not found");

            if (dto.Status == false &&
                !(await _userManager.IsInRoleAsync(currentUser, "Administrator")))
            {
                dto.Password = "**************";
            }

            // 3. Tìm CT_ThongTin dựa vào acc.Username
            var code = acc.Username?.Trim().ToLowerInvariant();
            if (!string.IsNullOrEmpty(code))
            {
                var ct = await _context.CT_ThongTin!
                                       .AsNoTracking()
                                       .Include(c => c.LoaiCT)
                                       .FirstOrDefaultAsync(c => c.DaXoa == false
                                                              && c.MaCT!.ToLower() == code);
                if (ct != null)
                {
                    // 4. Tìm GP_ThongTin liên quan
                    var gp = await _context.GP_ThongTin!
                                           .AsNoTracking()
                                           .Include(g => g.ToChuc_CaNhan)
                                           .FirstOrDefaultAsync(g => g.DaXoa == false
                                                                 && g.IdCT == ct.Id);



                    // 5. Gán cong_trinh
                    dto.cong_trinh = new DataConstructionForTransmissionAccountsDto
                    {
                        chu_gp = gp?.ToChuc_CaNhan?.TenTCCN,
                        dc_chu_gp = gp?.ToChuc_CaNhan?.DiaChi,
                        email = gp?.ToChuc_CaNhan?.Email,
                        ten_ct = ct.TenCT,
                        ma_ct = ct.MaCT,
                        vi_tri = ct.ViTriCT,
                        loai_ct = ct.LoaiCT?.TenLoaiCT,
                        x = (double)(ct.X ?? 0),
                        y = (double)(ct.Y ?? 0)
                    };
                }
            }

            return dto;
        }

        // Method to save or update a CT_ThongTin entity
        public async Task<int> SaveAsync(DataTransmissionAccountsDto dto)
        {
            // lay thong tin user hien tai
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);

            // lay execution strategy de ho tro retry
            var strategy = _context.Database.CreateExecutionStrategy();

            // thuc thi toan bo cong viec ben trong delegate, neu co loi EF se tu retry lai
            return await strategy.ExecuteAsync(async () =>
            {
                // mo transaction
                await using var tx = await _context.Database.BeginTransactionAsync();

                // 1. luu hoac cap nhat ban ghi DataTransmissionAccounts
                DataTransmissionAccounts item;
                var existingItem = await _context.DataTransmissionAccounts
                                                 .FirstOrDefaultAsync(e => e.Username == dto.Username);

                if (existingItem == null || dto.Username == null)
                {
                    // tao moi
                    item = _mapper.Map<DataTransmissionAccounts>(dto);
                    item.Status = false;
                    item.CreatedTime = DateTime.Now;
                    item.CreatedUser = currentUser?.UserName;
                    _context.DataTransmissionAccounts.Add(item);
                }
                else
                {
                    // cap nhat
                    item = existingItem;
                    _mapper.Map(dto, item);
                    item.ModifiedTime = DateTime.Now;
                    item.ModifiedUser = currentUser?.UserName;
                    _context.DataTransmissionAccounts.Update(item);
                }

                // 2. luu thay doi DataTransmissionAccounts
                await _context.SaveChangesAsync();

                // 3. cap nhat cac bang lien quan (CT_ThongTin, ToChuc_CaNhan,…)
                if (dto.cong_trinh != null)
                {
                    // cap nhat CT_ThongTin
                    var code = dto.cong_trinh.ma_ct?.Trim();
                    var ct = await _context.CT_ThongTin!.FirstOrDefaultAsync(c => c.DaXoa == false && c.MaCT == code);
                    if (ct != null)
                    {
                        ct.TenCT = dto.cong_trinh.ten_ct;
                        ct.ViTriCT = dto.cong_trinh.vi_tri;
                        ct.ThoiGianSua = DateTime.Now;

                        // Get user roles to check if they have the Construction role
                        var userRoles = await _userManager.GetRolesAsync(currentUser);

                        ct.MaCT = userRoles.Contains("Construction") ? currentUser?.UserName : ct.MaCT;


                        _context.CT_ThongTin!.Update(ct);

                        // cap nhat ToChuc_CaNhan thong qua IdTCCN tren GP_ThongTin
                        var gp = await _context.GP_ThongTin!
                                               .AsNoTracking()
                                               .FirstOrDefaultAsync(g => g.DaXoa == false && g.IdCT == ct.Id);
                        if (gp?.IdTCCN != null)
                        {
                            var org = await _context.ToChuc_CaNhan!
                                                    .FirstOrDefaultAsync(o => o.Id == gp.IdTCCN);
                            if (org != null)
                            {
                                org.TenTCCN = dto.cong_trinh.chu_gp;
                                org.DiaChi = dto.cong_trinh.dc_chu_gp;
                                org.Email = dto.cong_trinh.email;
                                org.ThoiGianSua = DateTime.Now;
                                org.TaiKhoanSua = currentUser?.UserName;
                                _context.ToChuc_CaNhan!.Update(org);
                            }
                        }
                    }
                }

                await _context.SaveChangesAsync();

                var prettyJson = JsonConvert.SerializeObject(dto, Formatting.Indented);

                await _logChangeService.LogChangeAsync(
                    "DataTransmissionAccounts",
                    existingItem == null ? "CREATE" : "UPDATE",
                    existingItem != null
                        ? _mapper.Map<DataTransmissionAccountsDto>(existingItem)
                        : null,
                    _mapper.Map<DataTransmissionAccountsDto>(item),
                    item.Id,
                    currentUser?.UserName
                );

                // 6. commit transaction
                await tx.CommitAsync();

                return item.Id;
            });
        }



        // Method to delete a CT_ThongTin entity
        public async Task<bool> DeleteAsync(int Id)
        {
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);
            // Retrieve an existing item based on Id
            var existingItem = await _context.DataTransmissionAccounts!.FirstOrDefaultAsync(acc => acc.Id == Id);

            if (existingItem == null) { return false; } // If the item doesn't exist, return false

            _context.DataTransmissionAccounts!.Remove(existingItem);

            // Save changes to the database
            var res = await _context.SaveChangesAsync();

            if (res > 0)
            {
                await _logChangeService.LogChangeAsync(
                   "DataTransmissionAccounts",
                   "DELETE",
                   existingItem,
                   null,
                   existingItem.Id,
                   currentUser?.UserName
               );
            }

            // Return true to indicate successful deletion
            return res > 0;
        }

        public async Task<bool> ActiveAsync(int Id)
        {
            var existingItem = await _context.DataTransmissionAccounts!.FirstOrDefaultAsync(acc => acc.Id == Id && acc.Status == false);
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);

            if (existingItem == null) { return false; }
            existingItem.ModifiedTime = DateTime.Now;
            existingItem.ModifiedUser = currentUser != null ? currentUser.UserName : null;
            existingItem!.Status = true;
            _context.DataTransmissionAccounts!.Update(existingItem);
            var res = await _context.SaveChangesAsync();

            if (res != 0)
            {
                await _logChangeService.LogChangeAsync(
                    "DataTransmissionAccounts",
                    "ACTIVE",
                    existingItem,
                    null,
                    existingItem.Id,
                    currentUser?.UserName
                );

                var dto = await GetDtoByIdAsync(Id);
                if (dto != null)
                {
                    var prettyJson = JsonConvert.SerializeObject(dto, Formatting.Indented);

                    var sb = new StringBuilder();
                    sb.AppendLine("[Thông báo] Yêu cầu kết nối truyền dữ liệu đã được duyệt");
                    sb.AppendLine($"[Đơn vị xin cấp phép] : {dto.cong_trinh?.chu_gp}");
                    sb.AppendLine($"[Địa chỉ]              : {dto.cong_trinh?.dc_chu_gp}");
                    sb.AppendLine($"[Tên công trình]       : {dto.cong_trinh?.ten_ct}");
                    sb.AppendLine($"[Vị trí công trình]    : {dto.cong_trinh?.vi_tri}");
                    sb.AppendLine($"[Tài khoản]            : {dto.Username}");
                    sb.AppendLine($"[Mật khẩu]             : {dto.Password}");
                    sb.AppendLine($"[FTPAddress]           : {dto.FTPAddress}");
                    sb.AppendLine($"[Port]                 : {dto.Port}");
                    sb.AppendLine($"[WorkingDirectory]     : {dto.WorkingDirectory}");
                    sb.AppendLine();
                    sb.AppendLine("[Tài liệu hướng dẫn]    : https://drive.google.com/drive/folders/1rjZvP6U5AenOJeX-bZFTCBJyh1ScxgdR?usp=sharing");

                    await _mail.SendEmailAsync(
                        dto.cong_trinh!.email != null ? dto.cong_trinh!.email : "thienphong440011@gmail.com",
                        "[Thông báo] Yêu cầu kết nối truyền dữ liệu đã được duyệt",
                        sb.ToString()
                    );
                }
            }

            return true;
        }

        public async Task<bool> DeActiveAsync(int Id)
        {
            var existingItem = await _context.DataTransmissionAccounts!.FirstOrDefaultAsync(acc => acc.Id == Id && acc.Status == true);
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User);

            if (existingItem == null) { return false; }
            existingItem.ModifiedTime = DateTime.Now;
            existingItem.ModifiedUser = currentUser != null ? currentUser.UserName : null;
            existingItem!.Status = false;
            _context.DataTransmissionAccounts!.Update(existingItem);
            var res = await _context.SaveChangesAsync();

            if (res != 0)
            {
                await _logChangeService.LogChangeAsync(
                    "DataTransmissionAccounts",
                    "ACTIVE",
                    existingItem,
                    null,
                    existingItem.Id,
                    currentUser?.UserName
                );
            }

            return true;
        }

        /// <summary>
        /// Get accounts based on the user's role
        /// </summary>
        public async Task<List<DataTransmissionAccountsDto>> GetAccountsByRoleAsync()
        {
            // Get current user
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                            ?? throw new UnauthorizedAccessException("User not found");

            // Get user roles
            var roles = await _userManager.GetRolesAsync(currentUser);

            // Handle based on role
            if (roles.Contains("Administrator"))
            {
                // Admin gets all accounts
                return await GetAllAsync();
            }
            else if (roles.Contains("Business"))
            {
                // Business gets accounts for constructions they manage
                return await GetAccountsForBusinessAsync(currentUser);
            }
            else // Construction or other roles
            {
                // User gets only their own account if it exists
                var account = await GetByUserAsync();
                return account != null ? new List<DataTransmissionAccountsDto> { account } : new List<DataTransmissionAccountsDto>();
            }
        }

        /// <summary>
        /// Get accounts for constructions managed by a business user
        /// </summary>
        private async Task<List<DataTransmissionAccountsDto>> GetAccountsForBusinessAsync(AspNetUsers user)
        {
            // 1. Find the business entity for this user
            var business = await _context.ToChuc_CaNhan
                .AsNoTracking()
                .FirstOrDefaultAsync(tc => tc.TaiKhoan == user.UserName && tc.DaXoa != true);

            if (business == null)
            {
                return new List<DataTransmissionAccountsDto>();
            }

            // 2. Get licenses for this business
            var licenses = await _context.GP_ThongTin
                .AsNoTracking()
                .Where(gp => gp.IdTCCN == business.Id && gp.DaXoa != true)
                .ToListAsync();

            if (!licenses.Any())
            {
                return new List<DataTransmissionAccountsDto>();
            }

            // 3. Get construction IDs from licenses
            var constructionIds = licenses.Where(l => l.IdCT.HasValue).Select(l => l.IdCT.Value).Distinct().ToList();

            // 4. Get constructions
            var constructions = await _context.CT_ThongTin
                .AsNoTracking()
                .Where(ct => constructionIds.Contains(ct.Id) && ct.DaXoa != true)
                .ToListAsync();

            // 5. Get construction codes
            var constructionCodes = constructions
                .Where(c => !string.IsNullOrEmpty(c.MaCT))
                .Select(c => c.MaCT!.ToLowerInvariant())
                .ToList();

            if (!constructionCodes.Any())
            {
                return new List<DataTransmissionAccountsDto>();
            }

            // 6. Find accounts with matching usernames
            var accounts = await _context.DataTransmissionAccounts
                .AsNoTracking()
                .Where(acc => acc.Username != null && constructionCodes.Contains(acc.Username.ToLowerInvariant()))
                .ToListAsync();

            // 7. Map to DTOs with construction information
            var dtos = new List<DataTransmissionAccountsDto>();

            foreach (var account in accounts)
            {
                var dto = _mapper.Map<DataTransmissionAccountsDto>(account);

                // Find matching construction for this account
                var constructionCode = account.Username?.ToLowerInvariant();
                var construction = constructions.FirstOrDefault(c =>
                    c.MaCT != null && c.MaCT.ToLowerInvariant() == constructionCode);

                if (construction != null)
                {
                    // Find license for this construction
                    var license = licenses.FirstOrDefault(l => l.IdCT == construction.Id);

                    // Add construction info to DTO
                    dto.cong_trinh = new DataConstructionForTransmissionAccountsDto
                    {
                        chu_gp = business.TenTCCN,
                        dc_chu_gp = business.DiaChi,
                        email = business.Email,
                        ten_ct = construction.TenCT,
                        ma_ct = construction.MaCT,
                        vi_tri = construction.ViTriCT,
                        loai_ct = construction.LoaiCT?.TenLoaiCT,
                        x = (double)(construction.X ?? 0),
                        y = (double)(construction.Y ?? 0),
                        license_id = license?.Id,
                        license_number = license?.SoGP
                    };
                }

                // Hide password for non-admin users if account is not active
                if (dto.Status == false && !await _userManager.IsInRoleAsync(user, "Administrator"))
                {
                    dto.Password = "**************";
                }

                dtos.Add(dto);
            }

            return dtos;
        }

        /// <summary>
        /// Get constructions managed by the business user with their connection accounts
        /// </summary>
        public async Task<List<BusinessConstructionDto>> GetBusinessConstructionsAsync()
        {
            // 1. Get current user
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                             ?? throw new UnauthorizedAccessException("User not found");

            // 2. Check user's roles
            var roles = await _userManager.GetRolesAsync(currentUser);

            // 3. For business users, get their managed constructions
            if (roles.Contains("Business"))
            {
                // Find the business entity for this user
                var business = await _context.ToChuc_CaNhan
                    .AsNoTracking()
                    .FirstOrDefaultAsync(tc => tc.TaiKhoan == currentUser.UserName && tc.DaXoa != true);

                if (business == null)
                {
                    return new List<BusinessConstructionDto>();
                }

                // Get licenses for this business
                var licenses = await _context.GP_ThongTin
                    .AsNoTracking()
                    .Where(gp => gp.IdTCCN == business.Id && gp.DaXoa != true)
                    .ToListAsync();

                if (!licenses.Any())
                {
                    return new List<BusinessConstructionDto>();
                }

                // Get construction IDs from licenses
                var constructionIds = licenses.Select(l => l.IdCT).Distinct().ToList();

                // Get all constructions managed by this business
                var constructions = await _context.CT_ThongTin!
                    .AsNoTracking()
                    .Include(c => c.LoaiCT)
                    .Where(c => constructionIds.Contains(c.Id) && c.DaXoa != true)
                    .ToListAsync();

                // For each construction, find its connection account (if exists)
                var result = new List<BusinessConstructionDto>();
                foreach (var construction in constructions)
                {
                    // Get valid licenses for this construction (not expired and not revoked)
                    var validLicenses = licenses
                        .Where(l => l.IdCT == construction.Id &&
                                   (l.NgayHetHieuLuc == null || l.NgayHetHieuLuc > DateTime.Now) &&
                                   l.DaBiThuHoi != true)
                        .OrderByDescending(l => l.NgayKy)
                        .ToList();

                    // Get latest license
                    var latestLicense = validLicenses.FirstOrDefault();

                    // Find connection account by username = construction code
                    var account = await _context.DataTransmissionAccounts
                        .AsNoTracking()
                        .FirstOrDefaultAsync(a => a.Username != null && a.Username.ToLower() == construction.MaCT!.ToLower());

                    // Map to result DTO
                    result.Add(new BusinessConstructionDto
                    {
                        Construction = _mapper.Map<CT_ThongTinDto>(construction),
                        LatestLicense = latestLicense != null ? _mapper.Map<GP_ThongTinDto>(latestLicense) : null,
                        ConnectionAccount = account != null ? _mapper.Map<DataTransmissionAccountsDto>(account) : null
                    });
                }

                return result;
            }
            else
            {
                throw new UnauthorizedAccessException("User does not have the Business role");
            }
        }

        /// <summary>
        /// Gets construction data with connections based on user role:
        /// - For Business: All constructions they manage
        /// - For Construction: Only their specific construction
        /// </summary>
        public async Task<List<BusinessConstructionDto>> GetConstructionsForClientAsync()
        {
            // 1. Get current user
            var currentUser = await _userManager.GetUserAsync(_httpContext.HttpContext!.User)
                             ?? throw new UnauthorizedAccessException("User not found");

            // 2. Check user's roles
            var roles = await _userManager.GetRolesAsync(currentUser);
            var result = new List<BusinessConstructionDto>();

            if (roles.Contains("Business"))
            {
                // Business role - get all managed constructions
                // Find the business entity for this user
                var business = await _context.ToChuc_CaNhan
                    .AsNoTracking()
                    .FirstOrDefaultAsync(tc => tc.TaiKhoan == currentUser.UserName && tc.DaXoa != true);

                if (business == null)
                {
                    return new List<BusinessConstructionDto>();
                }

                // Get licenses for this business
                var licenses = await _context.GP_ThongTin
                    .AsNoTracking()
                    .Where(gp => gp.IdTCCN == business.Id && gp.DaXoa != true)
                    .ToListAsync();

                if (!licenses.Any())
                {
                    return new List<BusinessConstructionDto>();
                }

                // Get construction IDs from licenses
                var constructionIds = licenses.Select(l => l.IdCT).Distinct().ToList();

                // Get all constructions managed by this business
                var constructions = await _context.CT_ThongTin!
                    .AsNoTracking()
                    .Include(c => c.LoaiCT)
                    .Where(c => constructionIds.Contains(c.Id) && c.DaXoa != true)
                    .ToListAsync();

                // For each construction, find its connection account (if exists) and latest valid license
                foreach (var construction in constructions)
                {
                    // Get valid licenses for this construction
                    var validLicenses = licenses
                        .Where(l => l.IdCT == construction.Id &&
                                  (l.NgayHetHieuLuc == null || l.NgayHetHieuLuc > DateTime.Now) &&
                                  l.DaBiThuHoi != true)
                        .OrderByDescending(l => l.NgayKy)
                        .ToList();

                    // Get latest license
                    var latestLicense = validLicenses.FirstOrDefault();

                    // Find connection account by username = construction code
                    var account = await _context.DataTransmissionAccounts
                        .AsNoTracking()
                        .FirstOrDefaultAsync(a => a.Username != null && a.Username.ToLower() == construction.MaCT!.ToLower());

                    // Map to result DTO
                    result.Add(new BusinessConstructionDto
                    {
                        Construction = _mapper.Map<CT_ThongTinDto>(construction),
                        LatestLicense = latestLicense != null ? _mapper.Map<GP_ThongTinDto>(latestLicense) : null,
                        ConnectionAccount = account != null ? _mapper.Map<DataTransmissionAccountsDto>(account) : null,
                        BusinessInfo = _mapper.Map<ToChuc_CaNhanDto>(business)
                    });
                }
            }
            else if (roles.Contains("Construction"))
            {
                // Construction role - get only their specific construction
                // Find construction by user account
                var construction = await _context.CT_ThongTin!
                    .AsNoTracking()
                    .Include(c => c.LoaiCT)
                    .FirstOrDefaultAsync(c => c.TaiKhoan == currentUser.UserName && c.DaXoa != true);

                if (construction != null)
                {
                    // Find valid licenses for this construction
                    var validLicenses = await _context.GP_ThongTin
                        .AsNoTracking()
                        .Include(gp => gp.ToChuc_CaNhan)
                        .Where(l => l.IdCT == construction.Id &&
                                  (l.NgayHetHieuLuc == null || l.NgayHetHieuLuc > DateTime.Now) &&
                                  l.DaBiThuHoi != true && l.DaXoa != true)
                        .OrderByDescending(l => l.NgayKy)
                        .ToListAsync();

                    // Get latest license
                    var latestLicense = validLicenses.FirstOrDefault();

                    // Find connection account
                    var account = await _context.DataTransmissionAccounts
                        .AsNoTracking()
                        .FirstOrDefaultAsync(a => a.Username != null && a.Username.ToLower() == construction.MaCT!.ToLower());

                    // Get business info from license
                    var businessInfo = latestLicense?.ToChuc_CaNhan;

                    // Map to result DTO
                    result.Add(new BusinessConstructionDto
                    {
                        Construction = _mapper.Map<CT_ThongTinDto>(construction),
                        LatestLicense = latestLicense != null ? _mapper.Map<GP_ThongTinDto>(latestLicense) : null,
                        ConnectionAccount = account != null ? _mapper.Map<DataTransmissionAccountsDto>(account) : null,
                        BusinessInfo = businessInfo != null ? _mapper.Map<ToChuc_CaNhanDto>(businessInfo) : null
                    });
                }
            }

            return result;
        }
    }
}
